// Code generated by MockGen. DO NOT EDIT.
// Source: chat-server/repository (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mocks

import (
	models "chat-server/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddChat mocks base method.
func (m *MockRepository) AddChat(arg0 models.Chat) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChat", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChat indicates an expected call of AddChat.
func (mr *MockRepositoryMockRecorder) AddChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChat", reflect.TypeOf((*MockRepository)(nil).AddChat), arg0)
}

// AddMessage mocks base method.
func (m *MockRepository) AddMessage(arg0 models.AddMsgForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockRepositoryMockRecorder) AddMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockRepository)(nil).AddMessage), arg0)
}

// AddUser mocks base method.
func (m *MockRepository) AddUser(arg0 models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRepositoryMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRepository)(nil).AddUser), arg0)
}

// GetChatsByUserID mocks base method.
func (m *MockRepository) GetChatsByUserID(arg0 int) ([]*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatsByUserID", arg0)
	ret0, _ := ret[0].([]*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatsByUserID indicates an expected call of GetChatsByUserID.
func (mr *MockRepositoryMockRecorder) GetChatsByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatsByUserID", reflect.TypeOf((*MockRepository)(nil).GetChatsByUserID), arg0)
}

// GetMessagesByChatID mocks base method.
func (m *MockRepository) GetMessagesByChatID(arg0 int) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByChatID", arg0)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByChatID indicates an expected call of GetMessagesByChatID.
func (mr *MockRepositoryMockRecorder) GetMessagesByChatID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByChatID", reflect.TypeOf((*MockRepository)(nil).GetMessagesByChatID), arg0)
}
